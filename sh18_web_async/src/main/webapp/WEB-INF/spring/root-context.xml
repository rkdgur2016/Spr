<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    
    <!-- mapper interface scanner -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <property name="basePackage" value = "com.pcwk.ehr.mapper"></property>
    </bean>
    
    <!-- JdbcTemplate -->
    <bean id = "jdbcTemplate" class = "org.springframework.jdbc.core.JdbcTemplate">
       <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <!-- mybatis-config.xml, mapper*.xml파일  -->
      <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
    </bean>
    
    <!--
       Mybatis-config.xml
       mapper : user.xml, board.xml
    --> 
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
       <!-- db 연결 -->   
       <property name="dataSource" ref="dataSource"></property>
       
       <!-- mybatis-config.xml 위치 -->
       <property name="configLocation" value="classpath:mybatis-config.xml"/>
    
       <!-- mapper파일 : mapper/**/*.xml -->
       <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
    </bean>
    
    <!-- 트랜잭션 Advice 설정 --> 
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 트랜잭션 적용 : up으로 시작하는 메서드에 적용한다
            name : 트랜잭션 적용 메서드 이름
            read-only : 읽기 전용 여부
            rollback-for : 트랜잭션을 롤백할 예외
            -->
            <tx:method name="*Tx" read-only="false" rollback-for="Exception"/> <!-- up으로 시작하는 method는 트랜잭션을 적용한다 -->
            
            <!-- 트랜잭션 제외 : up으로 시작하지 않은 모든 메서드는 트랜잭션에서 제외한다 -->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    
    <tx:annotation-driven proxy-target-class="true"
        transaction-manager="transactionManager" />
    
    <!-- Tx -->
    <aop:config>
       <aop:pointcut expression="execution( * com.pcwk.ehr..service.*Impl.*Tx(..))" id="txPointCut"/>
       <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <property name="dataSource" ref="dataSource" ></property>
       <!-- <constructor-arg index="0" ref="dataSource"></constructor-arg> -->
    </bean>
        
    <bean id="dataSource" class = "com.zaxxer.hikari.HikariDataSource">
        <!-- <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> -->
        
        <!-- 개발에서만 사용 log출력 -->
        <property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
        <!-- 개발에서만 사용 log출력 -->
        
        <!-- <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"/> -->
        
        <!-- 개발에서만 사용 log출력 -->
        <property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"></property>
        <!-- 개발에서만 사용 log출력 -->
        
        <property name="username" value="scott"/>
        <property name="password" value="pcwk"/>
        
        <!-- Option settings -->
        <property name="maximumPoolSize" value="10"></property>
        <property name="minimumIdle" value="5"></property>
        <property name="connectionTimeout" value="30000"></property>
        <property name="idleTimeout" value="600000"></property>
        <property name="maxLifetime" value="1800000"></property>
    </bean>
            
    <!-- 개발용 이메일 설정 -->
    <bean id = "dummyMailService" class = "com.pcwk.ehr.user.service.DummyMailService"/>
   
    <!-- 이메일 시작 --> 
    <bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.naver.com"></property>
        <property name="port" value="465"></property>
        <property name="username" value="bagsa1717@naver.com"></property>
        <property name="password" value="비밀이다"></property>
        <property name="defaultEncoding" value="utf-8"></property>
        
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.host">smtp.naver.com</prop>
                <prop key="mail.smtp.port">465</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
                <prop key="mail.smtp.ssl.enable">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean> 
    <!-- 이메일 끝 -->    
   
   <!-- TestUserService -->
   <bean id = "testUserService" class="com.pcwk.ehr.user.service.TestUserService">
      <constructor-arg value="james04"></constructor-arg>
      <property name="mailSender" ref="dummyMailService"></property>
   </bean>
   
</beans>
